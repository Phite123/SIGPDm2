<div class="card">
    <div class="card-body">

        <EditForm Model="@oInsumo" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-sm-4">
                    <label>Descripción</label>
                    <InputText class="form-control" @bind-Value="@oInsumo.Descripcion" placeholder="Descripción"></InputText>
                    <ValidationMessage For="(()=> oInsumo.Descripcion)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label class="col-sm">Código</label>
                    <InputText @bind-Value="@oInsumo.Codigo" class="form-control" placeholder="Código"></InputText>
                    <ValidationMessage For="(()=> oInsumo.Codigo)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label class="col-sm">Foto</label>
                    <InputText @bind-Value="@oInsumo.Foto" class="form-control" placeholder="Foto"></InputText>
                    <ValidationMessage For="(()=> oInsumo.Foto)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-sm-4">
                    <label>Stock minimo</label>
                    <InputNumber class="form-control" @bind-Value="@oInsumo.StockMin" placeholder="Stock minimo"></InputNumber>
                    <ValidationMessage For="(()=> oInsumo.StockMin)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Stock real</label>
                    <InputNumber class="form-control" @bind-Value="@oInsumo.StockReal" placeholder="Stock real"></InputNumber>
                    <ValidationMessage For="(()=> oInsumo.StockReal)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Stock maximo</label>
                    <InputNumber class="form-control" @bind-Value="@oInsumo.StockMax" placeholder="Stock maximo"></InputNumber>
                    <ValidationMessage For="(()=> oInsumo.StockMax)" style="color:red;" />
                </div>
            </div>

            <br />
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>


@code {
    Insumo oInsumo = new();
    Respuesta<Insumo> oRta = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            oRta = await http.GetFromJsonAsync<Respuesta<Insumo>>($"/api/Insumo/{id}");
            oInsumo = oRta.List;
        }
    }

    async Task Guardar()
    {
        if (id == 0)
        {
            await http.PostAsJsonAsync<Insumo>("/api/Insumo", oInsumo);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await http.PutAsJsonAsync<Insumo>("/api/Insumo", oInsumo);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}
