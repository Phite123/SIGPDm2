@page "/despacho/{id:int}"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Información correspondiente a la orden n° @id</h1>
<hr />
<p>Seleccionar cantidad de material a utilizar</p>
<div class="row">
    <div class="col-2">
        <RadzenNumeric ShowUpDown="false" TValue="int?" Placeholder="cantidad..." Class="w-100" />
    </div>
    <div class="col-2">
        <button class="btn btn-outline-info ">Enviar</button>
    </div>

</div>
<br />
<button class="btn btn-outline-success">Comenzar</button>&nbsp;
<button class="btn btn-outline-danger">Pausar</button>&nbsp;
<button class="btn btn-outline-primary" @onclick="alertaSend">Finalizar despacho</button>

@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();

    protected override async Task OnInitializedAsync()
    {
        
        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;
        
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/despacho");
    }
    public async Task alertaSend()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se finalizará la orden de trabajo",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Finalizar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            send();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task send()
    {
        oTrabajo.Estado = "Finalizado";

        List<TimesEtapa> listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        TimesEtapa times = listTimes.Where(x => x.Etapa == "Despacho").Last();
        listTimes.RemoveAll(x => x == times);

        times.Times.Add(Tuple.Create("Salida", DateTime.Now));
        DateTime entrada = times.Times.Where(x => x.Item1 == "Entrada").Last().Item2;
        times.TimeTotalEtapa = (int)(DateTime.Now - entrada).TotalMinutes;

        listTimes.Add(times);

        oTrabajo.Fechas = JsonSerializer.Serialize<List<TimesEtapa>>(listTimes);

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
}
