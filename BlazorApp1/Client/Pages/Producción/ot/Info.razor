@page "/ot/{id:int}"
<style>
    @@media print {
        .no-print {
            display: none !important;
        }
    }

    .style1 {
        background-color: #BFBCBC;
        border-radius: 10px;
    }
</style>


<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br class="no-print" />
<br class="no-print" />
<h1 class="no-print">Información correspondiente a la orden n° @id</h1>
<button class="btn btn-outline-info no-print" @onclick=gotoplanos>Ver información adicional</button> &nbsp;
@if (oTrabajo.Estado == "Oficina tecnica")
{
    <button class="btn btn-outline-success no-print" @onclick=gotodespiece>Subir despiece</button>
}
<hr />

@if (oTrabajo.Cliente != null)
{
    <div class="row">
        <div class="col-6">
            <img src="images/logo.png" />
        </div>
        <div class="col-6">
            <br />
            <br />
            <br />
            <h2>ORDEN DE FABRICACIÓN</h2>
        </div>

    </div>
    <div class="row">
        <div class="col-6">
            <h4>
                <em>Cliente:</em> <span class="style1">@oTrabajo.Cliente</span>
            </h4>
        </div>
        <div class="col-6">
            <h4><em>Pedido a fábrica:</em> <span class="style1">@oTrabajo.Pedidofabrica</span></h4>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-6">
            <h4><em>Orden n°:</em> <span class="style1">@oTrabajo.Id</span></h4>
        </div>
        <div class="col-6">
            <h4><em>Fecha entrega:</em> <span class="style1">@oTrabajo.Fechaentrega</span></h4>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-6">
            <h4><em>Descripción de cada gabinete</em></h4>
        </div>
        <div class="col-6">
            <h4><em>Cantidad:</em> @oTrabajo.Cantidad</h4>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-12">
            <span class="style1">@oTrabajo.Descripcion</span>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-12">
            <h4><em>Lugar de entrega:</em> <span class="style1">@oTrabajo.Lugarentrega</span></h4>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-12">
            <center>
                <h4><em><span class="style1">OBSERVACIONES </span></em></h4>
            </center>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-12">
            <span class="style1">@oTrabajo.Observaciones</span>
        </div>
    </div>
    <br />
    <br />
    @if (oTrabajo.Estado == "Oficina tecnica")
    {
        <button class="btn btn-outline-primary no-print" @onclick="alertaSend">Enviar orden de trabajo</button>
    }
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/ot");
    }

    public async Task alertaSend()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se enviará a control de carpeta",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await send();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task send()
    {
        oTrabajo.Estado = "CC";

        List<TimesEtapa> listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        TimesEtapa times = listTimes.Where(x => x.Etapa == "Oficina tecnica").Last();
        listTimes.RemoveAll(x => x == times);


        times.Times.Add(Tuple.Create("Salida", DateTime.Now));
        DateTime entrada = times.Times.Where(x => x.Item1 == "Entrada").Last().Item2;
        times.TimeTotalEtapa = (int)(DateTime.Now - entrada).TotalHours;

        listTimes.Add(times);

        TimesEtapa times2 = new("CC");
        listTimes.Add(times2);

        oTrabajo.Fechas = JsonSerializer.Serialize<List<TimesEtapa>>(listTimes);

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }

    async Task gotoplanos()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Planos>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    async Task gotodespiece()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Despiece>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }
}
